/* eslint-disable no-unused-vars */
// App.js - Version restructur√©e respectant les r√®gles des hooks React
import React, { Suspense, useState, useEffect, useRef, useCallback } from 'react';
import { Canvas, useLoader, useThree } from '@react-three/fiber';
import { VRButton, ARButton, XR, Controllers, Hands } from '@react-three/xr';
import { OrbitControls, Text, Box } from '@react-three/drei';
import { TextureLoader } from 'three';
import * as THREE from 'three';
import './App.css';

// Composant de diagnostic des capacit√©s WebGL
function WebGLDiagnostic() {
  const { gl } = useThree();
  const [glInfo, setGlInfo] = useState(null);
  const [initStatus, setInitStatus] = useState('checking');

  useEffect(() => {
    const checkWebGLAvailability = () => {
      console.log('üîç V√©rification de la disponibilit√© WebGL...');
      
      if (!gl) {
        console.log('‚è≥ Contexte WebGL pas encore disponible');
        setInitStatus('waiting_context');
        return false;
      }
      
      if (typeof gl.getParameter !== 'function') {
        console.log('‚è≥ M√©thodes WebGL pas encore initialis√©es');
        setInitStatus('waiting_methods');
        return false;
      }
      
      try {
        const testParam = gl.getParameter(gl.VERSION);
        if (!testParam) {
          console.log('‚è≥ Param√®tres WebGL pas encore accessibles');
          setInitStatus('waiting_parameters');
          return false;
        }
      } catch (error) {
        console.log('‚è≥ Erreur d\'acc√®s aux param√®tres WebGL:', error.message);
        setInitStatus('error_access');
        return false;
      }
      
      return true;
    };

    const getWebGLInfo = () => {
      try {
        console.log('‚úÖ WebGL compl√®tement disponible, r√©cup√©ration des infos...');
        
        const info = {
          maxTextureSize: gl.getParameter(gl.MAX_TEXTURE_SIZE),
          renderer: gl.getParameter(gl.RENDERER),
          vendor: gl.getParameter(gl.VENDOR),
          version: gl.getParameter(gl.VERSION),
          maxTextureImageUnits: gl.getParameter(gl.MAX_TEXTURE_IMAGE_UNITS),
          maxCombinedTextureImageUnits: gl.getParameter(gl.MAX_COMBINED_TEXTURE_IMAGE_UNITS),
          extensions: {
            textureFloat: !!gl.getExtension('OES_texture_float'),
            textureHalfFloat: !!gl.getExtension('OES_texture_half_float'),
            compressedTextures: !!gl.getExtension('WEBGL_compressed_texture_s3tc'),
            anisotropicFiltering: !!gl.getExtension('EXT_texture_filter_anisotropic')
          }
        };
        
        setGlInfo(info);
        setInitStatus('ready');
        
        console.log('=== DIAGNOSTIC WEBGL COMPLET ===');
        console.log('Taille texture maximum:', info.maxTextureSize, 'pixels');
        console.log('Ton image fait 12000x6000, limit d√©pass√©e?', 12000 > info.maxTextureSize);
        console.log('GPU:', info.renderer);
        console.log('Vendor:', info.vendor);
        console.log('Unit√©s de texture disponibles:', info.maxTextureImageUnits);
        console.log('Extensions support√©es:', info.extensions);
        console.log('================================');
        
        return info;
        
      } catch (error) {
        console.error('‚ùå Erreur lors de la r√©cup√©ration des infos WebGL:', error);
        setInitStatus('error_retrieval');
        return null;
      }
    };

    const initializeWebGLDiagnostic = () => {
      if (checkWebGLAvailability()) {
        getWebGLInfo();
      } else {
        setTimeout(initializeWebGLDiagnostic, 100);
      }
    };

    initializeWebGLDiagnostic();
    
  }, [gl]);

  if (!glInfo) {
    const getInitMessage = () => {
      switch (initStatus) {
        case 'checking': return 'üîç V√©rification WebGL...';
        case 'waiting_context': return '‚è≥ Attente contexte WebGL...';
        case 'waiting_methods': return '‚è≥ Initialisation m√©thodes...';
        case 'waiting_parameters': return '‚è≥ Chargement param√®tres...';
        case 'error_access': return '‚ùå Erreur acc√®s WebGL';
        case 'error_retrieval': return '‚ùå Erreur r√©cup√©ration infos';
        default: return '‚è≥ Initialisation...';
      }
    };

    return (
      <Text
        position={[0, 4, -2]}
        fontSize={0.15}
        color="#FFAA00"
        anchorX="center"
        anchorY="middle"
        outlineWidth={0.01}
        outlineColor="black"
      >
        {getInitMessage()}
      </Text>
    );
  }

  return (
    <Text
      position={[0, 4, -2]}
      fontSize={0.15}
      color="#00FF00"
      anchorX="center"
      anchorY="middle"
      outlineWidth={0.01}
      outlineColor="black"
    >
      {`GPU: ${glInfo.renderer.substring(0, 30)}...
Limite texture: ${glInfo.maxTextureSize}px
Ton image: 12000px ${12000 > glInfo.maxTextureSize ? '‚ùå TROP GRANDE' : '‚úÖ OK'}
Unit√©s texture: ${glInfo.maxTextureImageUnits}`}
    </Text>
  );
}

// Hook personnalis√© pour surveiller la m√©moire proprement
function useMemoryMonitor() {
  const [memoryInfo, setMemoryInfo] = useState(null);

  useEffect(() => {
    const interval = setInterval(() => {
      if (performance.memory) {
        setMemoryInfo({
          used: Math.round(performance.memory.usedJSHeapSize / 1024 / 1024),
          total: Math.round(performance.memory.totalJSHeapSize / 1024 / 1024),
          limit: Math.round(performance.memory.jsHeapSizeLimit / 1024 / 1024)
        });
      }
    }, 2000);

    return () => clearInterval(interval);
  }, []);

  return memoryInfo;
}

// Composant pour afficher la m√©moire
function MemoryMonitor() {
  const memoryInfo = useMemoryMonitor();

  if (!memoryInfo) return null;

  return (
    <Text
      position={[3, 4, -2]}
      fontSize={0.12}
      color="#FFD700"
      anchorX="left"
      anchorY="middle"
      outlineWidth={0.01}
      outlineColor="black"
    >
      {`M√©moire JS:
${memoryInfo.used}MB / ${memoryInfo.total}MB
Limite: ${memoryInfo.limit}MB`}
    </Text>
  );
}

// Service de redimensionnement automatique d'images pour VR avec d√©tection WebGL avanc√©e
class ImageResizer {
  constructor() {
    this.maxTextureSize = 8192; // Valeur par d√©faut, sera mise √† jour
    this.targetRatio = 2; // Ratio 2:1 parfait pour panoramas √©quirectangulaires
    this.jpegQuality = 0.92; // Qualit√© √©lev√©e mais avec compression raisonnable
    this.webglLimitsDetected = false;
  }

  // Nouvelle m√©thode pour d√©tecter les vraies limites WebGL du syst√®me
  async detectWebGLLimits() {
    console.log('üîç === D√âTECTION DES VRAIES LIMITES WEBGL ===');
    
    try {
      // Cr√©er un contexte WebGL temporaire pour tester les limites
      const canvas = document.createElement('canvas');
      const gl = canvas.getContext('webgl') || canvas.getContext('experimental-webgl');
      
      if (!gl) {
        console.error('‚ùå WebGL non disponible pour la d√©tection des limites');
        return { success: false, maxTextureSize: 2048 }; // Fallback tr√®s conservateur
      }
      
      // Obtenir la vraie limite de texture de ce GPU sp√©cifique
      const detectedMaxSize = gl.getParameter(gl.MAX_TEXTURE_SIZE);
      const maxUnits = gl.getParameter(gl.MAX_TEXTURE_IMAGE_UNITS);
      const maxCombined = gl.getParameter(gl.MAX_COMBINED_TEXTURE_IMAGE_UNITS);
      
      console.log('üìä Limites d√©tect√©es du GPU:');
      console.log('   Taille texture maximum:', detectedMaxSize, 'pixels');
      console.log('   Unit√©s de texture:', maxUnits);
      console.log('   Unit√©s combin√©es:', maxCombined);
      
      // Test pratique : essayer de cr√©er une texture aux dimensions limites
      const testSize = Math.min(detectedMaxSize, 8192); // Commencer avec une taille raisonnable
      const testTexture = gl.createTexture();
      gl.bindTexture(gl.TEXTURE_2D, testTexture);
      
      try {
        // Tenter de cr√©er une texture √† la taille th√©orique maximum
        gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, testSize, testSize / 2, 0, gl.RGBA, gl.UNSIGNED_BYTE, null);
        const error = gl.getError();
        
        if (error === gl.NO_ERROR) {
          console.log('‚úÖ Test de cr√©ation texture r√©ussi √†', testSize, 'pixels');
          this.maxTextureSize = testSize;
        } else {
          console.warn('‚ö†Ô∏è √âchec du test √†', testSize, 'pixels, error code:', error);
          // R√©duire la taille et r√©essayer
          const conservativeSize = Math.min(testSize / 2, 4096);
          this.maxTextureSize = conservativeSize;
          console.log('üéØ Utilisation de la taille conservatrice:', conservativeSize, 'pixels');
        }
      } catch (testError) {
        console.warn('‚ö†Ô∏è Exception lors du test de texture:', testError.message);
        this.maxTextureSize = 4096; // Tr√®s conservateur
      }
      
      // Nettoyer les ressources de test
      gl.deleteTexture(testTexture);
      
      this.webglLimitsDetected = true;
      
      console.log('üéØ Limite WebGL finale retenue:', this.maxTextureSize, 'pixels');
      console.log('=======================================');
      
      return { 
        success: true, 
        maxTextureSize: this.maxTextureSize,
        detectedMaxSize,
        maxUnits,
        maxCombined
      };
      
    } catch (error) {
      console.error('‚ùå Erreur lors de la d√©tection WebGL:', error);
      this.maxTextureSize = 2048; // Tr√®s conservateur en cas d'erreur
      return { success: false, maxTextureSize: this.maxTextureSize };
    }
  }

  // M√©thode principale enrichie avec d√©tection automatique des limites
  async processImage(imageUrl) {
    console.log('üñºÔ∏è === D√âBUT DU TRAITEMENT AUTOMATIQUE D\'IMAGE AVANC√â ===');
    console.log('üì• URL source:', imageUrl);
    
    try {
      // √âtape 0: D√©tecter les vraies limites WebGL si pas encore fait
      if (!this.webglLimitsDetected) {
        console.log('üîç D√©tection des limites WebGL du syst√®me...');
        const limitsResult = await this.detectWebGLLimits();
        if (limitsResult.success) {
          console.log('‚úÖ Limites WebGL d√©tect√©es, max texture:', this.maxTextureSize, 'pixels');
        }
      }
      
      // √âtape 1: Charger l'image originale pour analyser ses dimensions
      const originalImage = await this.loadImage(imageUrl);
      console.log('üìê Dimensions originales:', originalImage.width, 'x', originalImage.height);
      
      // √âtape 2: Analyser si un redimensionnement est n√©cessaire avec les vraies limites
      const analysis = this.analyzeImageNeed(originalImage);
      console.log('üîç Analyse avec limites r√©elles:', analysis.needsResize ? 'Redimensionnement requis' : 'Dimensions acceptables');
      
      if (!analysis.needsResize) {
        console.log('‚úÖ Image d√©j√† aux bonnes dimensions pour ce GPU, utilisation directe');
        return {
          success: true,
          resized: false,
          originalUrl: imageUrl,
          optimizedUrl: imageUrl,
          originalDimensions: { width: originalImage.width, height: originalImage.height },
          finalDimensions: { width: originalImage.width, height: originalImage.height },
          webglLimits: { maxTextureSize: this.maxTextureSize }
        };
      }
      
      // √âtape 3: Redimensionner avec m√©thode haute qualit√© progressive
      console.log('üîß Redimensionnement optimis√© vers:', analysis.targetWidth, 'x', analysis.targetHeight);
      console.log('üéØ Adapt√© sp√©cifiquement aux limites de votre GPU:', this.maxTextureSize, 'pixels');
      
      const resizedBlob = await this.resizeImageProgressive(originalImage, analysis.targetWidth, analysis.targetHeight);
      
      // √âtape 4: Cr√©er une URL temporaire avec validation suppl√©mentaire
      const optimizedUrl = URL.createObjectURL(resizedBlob);
      
      // √âtape 5: Validation que l'image redimensionn√©e est correcte
      console.log('üß™ Validation de l\'image redimensionn√©e...');
      const validationResult = await this.validateResizedImage(optimizedUrl, analysis.targetWidth, analysis.targetHeight);
      
      if (!validationResult.valid) {
        console.error('‚ùå Validation √©chou√©e:', validationResult.error);
        URL.revokeObjectURL(optimizedUrl);
        throw new Error('Image redimensionn√©e invalide: ' + validationResult.error);
      }
      
      // Calcul des √©conomies de m√©moire
      const originalMemoryMB = (originalImage.width * originalImage.height * 4) / 1024 / 1024;
      const optimizedMemoryMB = (analysis.targetWidth * analysis.targetHeight * 4) / 1024 / 1024;
      const memorySavings = originalMemoryMB - optimizedMemoryMB;
      
      console.log('üíæ M√©moire GPU originale:', originalMemoryMB.toFixed(1), 'MB');
      console.log('üíæ M√©moire GPU optimis√©e:', optimizedMemoryMB.toFixed(1), 'MB');
      console.log('üí∞ √âconomie de m√©moire:', memorySavings.toFixed(1), 'MB');
      console.log('‚úÖ Redimensionnement et validation termin√©s avec succ√®s');
      
      return {
        success: true,
        resized: true,
        originalUrl: imageUrl,
        optimizedUrl: optimizedUrl,
        originalDimensions: { width: originalImage.width, height: originalImage.height },
        finalDimensions: { width: analysis.targetWidth, height: analysis.targetHeight },
        memorySavingsMB: memorySavings,
        fileSizeMB: resizedBlob.size / 1024 / 1024,
        webglLimits: { maxTextureSize: this.maxTextureSize },
        validationPassed: true
      };
      
    } catch (error) {
      console.error('‚ùå Erreur lors du traitement d\'image avanc√©:', error);
      return {
        success: false,
        error: error.message,
        originalUrl: imageUrl,
        webglLimits: { maxTextureSize: this.maxTextureSize }
      };
    }
  }

  // Nouvelle m√©thode de redimensionnement progressif pour une qualit√© optimale
  async resizeImageProgressive(image, targetWidth, targetHeight) {
    console.log('üé® Redimensionnement progressif haute qualit√©...');
    
    const originalWidth = image.width;
    const originalHeight = image.height;
    
    // Si la r√©duction est importante (> 50%), faire un redimensionnement en √©tapes
    const reductionFactor = (targetWidth * targetHeight) / (originalWidth * originalHeight);
    
    if (reductionFactor < 0.5) {
      console.log('üìâ R√©duction importante d√©tect√©e, redimensionnement en √©tapes...');
      return await this.resizeInSteps(image, targetWidth, targetHeight);
    } else {
      console.log('üìê R√©duction mod√©r√©e, redimensionnement direct...');
      return await this.resizeImageDirect(image, targetWidth, targetHeight);
    }
  }

  // Redimensionnement en √©tapes pour une qualit√© optimale sur de grandes r√©ductions
  async resizeInSteps(image, finalWidth, finalHeight) {
    let currentImage = image;
    let currentWidth = image.width;
    let currentHeight = image.height;
    
    // R√©duire par √©tapes de maximum 50% √† chaque fois
    while (currentWidth > finalWidth * 1.5 || currentHeight > finalHeight * 1.5) {
      const stepWidth = Math.max(Math.round(currentWidth * 0.7), finalWidth);
      const stepHeight = Math.max(Math.round(currentHeight * 0.7), finalHeight);
      
      console.log(`üìè √âtape de redimensionnement: ${currentWidth}x${currentHeight} ‚Üí ${stepWidth}x${stepHeight}`);
      
      const stepBlob = await this.resizeImageDirect(currentImage, stepWidth, stepHeight);
      currentImage = await this.loadImageFromBlob(stepBlob);
      currentWidth = stepWidth;
      currentHeight = stepHeight;
    }
    
    // Derni√®re √©tape vers les dimensions finales
    console.log(`üéØ √âtape finale: ${currentWidth}x${currentHeight} ‚Üí ${finalWidth}x${finalHeight}`);
    return await this.resizeImageDirect(currentImage, finalWidth, finalHeight);
  }

  // Charger une image depuis un blob
  async loadImageFromBlob(blob) {
    const url = URL.createObjectURL(blob);
    try {
      const image = await this.loadImage(url);
      return image;
    } finally {
      URL.revokeObjectURL(url);
    }
  }

  // Effectuer le redimensionnement avec Canvas pour une qualit√© optimale (inchang√©)
  async resizeImageDirect(image, targetWidth, targetHeight) {
    const canvas = document.createElement('canvas');
    const ctx = canvas.getContext('2d');
    
    canvas.width = targetWidth;
    canvas.height = targetHeight;
    
    ctx.imageSmoothingEnabled = true;
    ctx.imageSmoothingQuality = 'high';
    
    ctx.drawImage(image, 0, 0, targetWidth, targetHeight);
    
    return new Promise((resolve, reject) => {
      canvas.toBlob(
        (blob) => {
          if (blob) {
            resolve(blob);
          } else {
            reject(new Error('√âchec de la conversion canvas vers blob'));
          }
        },
        'image/jpeg',
        this.jpegQuality
      );
    });
  }

  // Nouvelle m√©thode de validation de l'image redimensionn√©e
  async validateResizedImage(url, expectedWidth, expectedHeight) {
    try {
      const image = await this.loadImage(url);
      
      if (image.width !== expectedWidth || image.height !== expectedHeight) {
        return {
          valid: false,
          error: `Dimensions incorrectes: attendu ${expectedWidth}x${expectedHeight}, obtenu ${image.width}x${image.height}`
        };
      }
      
      if (image.width <= 0 || image.height <= 0) {
        return {
          valid: false,
          error: 'Dimensions invalides (z√©ro ou n√©gatives)'
        };
      }
      
      const maxDimension = Math.max(image.width, image.height);
      if (maxDimension > this.maxTextureSize) {
        return {
          valid: false,
          error: `Dimension ${maxDimension} d√©passe la limite WebGL ${this.maxTextureSize}`
        };
      }
      
      console.log('‚úÖ Validation r√©ussie:', image.width, 'x', image.height);
      return { valid: true };
      
    } catch (error) {
      return {
        valid: false,
        error: 'Impossible de valider l\'image: ' + error.message
      };
    }
  }

  // Charger une image de mani√®re asynchrone avec gestion d'erreur robuste (inchang√©)
  loadImage(url) {
    return new Promise((resolve, reject) => {
      const img = new Image();
      img.crossOrigin = 'anonymous';
      
      img.onload = () => {
        console.log('‚úÖ Image charg√©e:', img.width, 'x', img.height);
        resolve(img);
      };
      
      img.onerror = (error) => {
        console.error('‚ùå √âchec du chargement de l\'image');
        reject(new Error(`Impossible de charger l'image: ${url}`));
      };
      
      setTimeout(() => {
        reject(new Error('Timeout: Image trop lente √† charger'));
      }, 15000);
      
      img.src = url;
    });
  }

  // Analyser si l'image n√©cessite un redimensionnement avec les vraies limites WebGL
  analyzeImageNeed(image) {
    const { width, height } = image;
    const maxDimension = Math.max(width, height);
    
    console.log('üîç Analyse avec limite WebGL d√©tect√©e:', this.maxTextureSize, 'pixels');
    
    // V√©rifier si l'image d√©passe les vraies limites WebGL d√©tect√©es
    if (maxDimension <= this.maxTextureSize) {
      return { needsResize: false };
    }
    
    // Calculer les nouvelles dimensions en conservant le ratio optimal
    let targetWidth, targetHeight;
    
    const currentRatio = width / height;
    
    if (currentRatio >= this.targetRatio) {
      targetWidth = Math.min(width, this.maxTextureSize);
      targetHeight = Math.round(targetWidth / this.targetRatio);
    } else {
      targetHeight = Math.min(height, this.maxTextureSize / this.targetRatio);
      targetWidth = Math.round(targetHeight * this.targetRatio);
    }
    
    // S'assurer que les dimensions restent dans les limites
    targetWidth = Math.min(targetWidth, this.maxTextureSize);
    targetHeight = Math.min(targetHeight, this.maxTextureSize / this.targetRatio);
    
    console.log('üéØ Dimensions cibles calcul√©es avec limites r√©elles:', targetWidth, 'x', targetHeight);
    console.log('üìä Ratio cible atteint:', (targetWidth / targetHeight).toFixed(2));
    
    return {
      needsResize: true,
      targetWidth,
      targetHeight,
      reductionFactor: (targetWidth * targetHeight) / (width * height)
    };
  }

  // Nettoyer les URL temporaires pour √©viter les fuites m√©moire (inchang√©)
  cleanup(optimizedUrl) {
    if (optimizedUrl && optimizedUrl.startsWith('blob:')) {
      URL.revokeObjectURL(optimizedUrl);
      console.log('üßπ URL temporaire nettoy√©e');
    }
  }
}

// Instance globale du service de redimensionnement
const imageResizer = new ImageResizer();
function PreflightDiagnostic({ url, onResults }) {
  const [preflightStatus, setPreflightStatus] = useState('starting');
  const [results, setResults] = useState(null);
  const [resizeStatus, setResizeStatus] = useState(null); // Nouveau √©tat pour le redimensionnement

  useEffect(() => {
    console.log('üîç === DIAGNOSTIC PR√âALABLE AVEC REDIMENSIONNEMENT AUTOMATIQUE ===');
    
    const runEnhancedPreflightChecks = async () => {
      setPreflightStatus('running');
      const testResults = {
        fileExists: false,
        fileSize: null,
        contentType: null,
        accessibleViaFetch: false,
        accessibleViaImage: false,
        imageProcessingResult: null, // Nouveau champ pour le r√©sultat du redimensionnement
        finalUrl: url, // URL finale √† utiliser (originale ou optimis√©e)
        serverResponse: null,
        imageDimensions: null,
        needsOptimization: false, // Nouveau champ pour indiquer si l'image a √©t√© optimis√©e
        timestamp: new Date().toLocaleTimeString()
      };

      // Test 1: V√©rification de l'existence du fichier via HEAD request
      console.log('üìã Test 1: V√©rification existence fichier...');
      try {
        const headResponse = await fetch(url, { method: 'HEAD' });
        testResults.serverResponse = headResponse.status;
        
        if (headResponse.ok) {
          testResults.fileExists = true;
          testResults.fileSize = headResponse.headers.get('content-length');
          testResults.contentType = headResponse.headers.get('content-type');
          
          console.log('‚úÖ Fichier trouv√© sur le serveur');
          console.log('üìä Taille:', testResults.fileSize ? `${(testResults.fileSize / 1024 / 1024).toFixed(1)}MB` : 'inconnue');
          console.log('üé≠ Type:', testResults.contentType || 'inconnu');
        } else {
          console.error('‚ùå Fichier non trouv√© (HTTP', headResponse.status, ')');
          console.error('üîç URL test√©e:', url);
          console.error('üí° V√©rifiez que le fichier est dans le dossier /public');
        }
      } catch (headError) {
        console.error('‚ùå Erreur lors du test d\'existence:', headError.message);
        testResults.serverResponse = 'ERROR';
      }

      // Test 2: Tentative de chargement via fetch
      if (testResults.fileExists) {
        console.log('üìã Test 2: Test de t√©l√©chargement via fetch...');
        try {
          const fetchResponse = await fetch(url);
          if (fetchResponse.ok) {
            testResults.accessibleViaFetch = true;
            console.log('‚úÖ Fichier t√©l√©chargeable via fetch');
          } else {
            console.error('‚ùå √âchec du t√©l√©chargement fetch:', fetchResponse.status);
          }
        } catch (fetchError) {
          console.error('‚ùå Erreur lors du test fetch:', fetchError.message);
        }
      }

      // Test 3: NOUVEAU - Chargement et optimisation automatique intelligente
      if (testResults.accessibleViaFetch) {
        console.log('üìã Test 3: Analyse et optimisation automatique de l\'image...');
        setResizeStatus('analyzing');
        
        try {
          // Utiliser notre service de redimensionnement intelligent
          const processingResult = await imageResizer.processImage(url);
          testResults.imageProcessingResult = processingResult;
          
          if (processingResult.success) {
            testResults.accessibleViaImage = true;
            testResults.imageDimensions = processingResult.finalDimensions;
            testResults.finalUrl = processingResult.optimizedUrl; // URL optimis√©e si redimensionn√©e
            testResults.needsOptimization = processingResult.resized;
            
            if (processingResult.resized) {
              console.log('üéØ Image automatiquement optimis√©e pour WebGL!');
              console.log('üìê Dimensions finales:', processingResult.finalDimensions.width, 'x', processingResult.finalDimensions.height);
              console.log('üíæ √âconomie m√©moire:', processingResult.memorySavingsMB?.toFixed(1), 'MB');
              setResizeStatus('resized');
            } else {
              console.log('‚úÖ Image d√©j√† aux dimensions optimales');
              setResizeStatus('optimal');
            }
          } else {
            console.error('‚ùå √âchec du traitement automatique:', processingResult.error);
            setResizeStatus('failed');
          }
          
        } catch (imageError) {
          console.error('‚ùå Erreur lors du traitement d\'image:', imageError.message);
          setResizeStatus('failed');
        }
      }

      setResults(testResults);
      
      // Analyse des r√©sultats et d√©termination du statut final
      console.log('üìä === R√âSULTATS DU DIAGNOSTIC PR√âALABLE ENRICHI ===');
      console.log('Fichier existe:', testResults.fileExists ? '‚úÖ' : '‚ùå');
      console.log('T√©l√©chargeable:', testResults.accessibleViaFetch ? '‚úÖ' : '‚ùå');
      console.log('Traitement image:', testResults.accessibleViaImage ? '‚úÖ' : '‚ùå');
      console.log('Optimisation appliqu√©e:', testResults.needsOptimization ? '‚úÖ Redimensionn√©' : '‚ö™ Non n√©cessaire');
      console.log('URL finale:', testResults.finalUrl);
      
      if (!testResults.fileExists) {
        setPreflightStatus('file_not_found');
      } else if (!testResults.accessibleViaFetch) {
        setPreflightStatus('fetch_failed');
      } else if (!testResults.accessibleViaImage) {
        setPreflightStatus('process_failed');
      } else {
        setPreflightStatus('success');
      }
      
      // Transmettre les r√©sultats enrichis au composant parent
      onResults(testResults);
    };

    runEnhancedPreflightChecks();
  }, [url, onResults]);

  const getStatusMessage = () => {
    switch (preflightStatus) {
      case 'starting':
        return 'üîÑ Initialisation du diagnostic enrichi...';
      case 'running':
        return `üîç Tests pr√©alables en cours...\n${getResizeStatusMessage()}`;
      case 'file_not_found':
        return '‚ùå Fichier panorama-test.jpg introuvable\nüí° Placez-le dans le dossier /public';
      case 'fetch_failed':
        return '‚ùå Impossible de t√©l√©charger le fichier\nüí° V√©rifiez les permissions et le serveur';
      case 'process_failed':
        return '‚ùå √âchec du traitement automatique\nüí° Format d\'image non support√© ou corrompu';
      case 'success':
        return getSuccessMessage();
      default:
        return '√âtat de test inconnu';
    }
  };

  const getResizeStatusMessage = () => {
    switch (resizeStatus) {
      case 'analyzing':
        return 'üîç Analyse des dimensions de l\'image...';
      case 'resized':
        return 'üéØ Redimensionnement automatique appliqu√©';
      case 'optimal':
        return '‚úÖ Dimensions d√©j√† optimales';
      case 'failed':
        return '‚ö†Ô∏è Probl√®me lors de l\'optimisation';
      default:
        return '';
    }
  };

  const getSuccessMessage = () => {
    if (!results?.imageProcessingResult) return '‚úÖ Tests pr√©alables r√©ussis!';
    
    const processing = results.imageProcessingResult;
    if (processing.resized) {
      return `‚úÖ Image automatiquement optimis√©e!
üìê ${processing.originalDimensions.width}x${processing.originalDimensions.height} ‚Üí ${processing.finalDimensions.width}x${processing.finalDimensions.height}
üíæ √âconomie: ${processing.memorySavingsMB?.toFixed(1)}MB m√©moire GPU
üöÄ Pr√™te pour WebGL et VR!`;
    } else {
      return `‚úÖ Image d√©j√† aux bonnes dimensions!
üìê ${processing.finalDimensions.width}x${processing.finalDimensions.height}
üéØ Optimale pour WebGL sans modification`;
    }
  };

  const getStatusColor = () => {
    switch (preflightStatus) {
      case 'starting':
      case 'running':
        return '#00BFFF';
      case 'success':
        return results?.needsOptimization ? '#32CD32' : '#00FF00'; // Vert diff√©rent si optimis√©
      case 'file_not_found':
      case 'fetch_failed':
      case 'process_failed':
        return '#FF4500';
      default:
        return '#FFFFFF';
    }
  };

  return (
    <Text
      position={[0, 3, -2]}
      fontSize={0.18}
      color={getStatusColor()}
      anchorX="center"
      anchorY="middle"
      outlineWidth={0.02}
      outlineColor="black"
      whiteSpace="pre-line"
    >
      {getStatusMessage()}
    </Text>
  );
}

// Hook personnalis√© enrichi pour diagnostiquer les probl√®mes useLoader/WebGL
// Hook personnalis√© qui utilise Three.js directement au lieu de useLoader
function useDirectTextureLoading({ url, shouldLoad, onTextureLoaded, onTextureError }) {
  const [loadingState, setLoadingState] = useState('idle');
  const [detailedStatus, setDetailedStatus] = useState('En attente...');
  const [progressInfo, setProgressInfo] = useState(null);
  const [webglAttemptStarted, setWebglAttemptStarted] = useState(false);
  const startTimeRef = useRef(null);
  const textureRef = useRef(null);
  
  useEffect(() => {
    if (shouldLoad && !webglAttemptStarted) {
      console.log('üöÄ === D√âBUT DU CHARGEMENT DIRECT THREE.JS ===');
      console.log('üìã URL √† charger:', url);
      console.log('‚è∞ Heure de d√©but:', new Date().toLocaleTimeString());
      setWebglAttemptStarted(true);
      setDetailedStatus('Initialisation du chargement direct...');
      setLoadingState('starting');
      startTimeRef.current = Date.now();
      
      // Cr√©er un loader Three.js directement
      const loader = new THREE.TextureLoader();
      
      // Configurer le chargement avec nos callbacks d√©taill√©s
      loader.load(
        url,
        
        // Callback de succ√®s - identique √† votre diagnostic pr√©c√©dent
        (loadedTexture) => {
          const loadTime = startTimeRef.current ? (Date.now() - startTimeRef.current) / 1000 : 'inconnu';
          
          console.log('üéâ === SUCC√àS CHARGEMENT DIRECT THREE.JS ===');
          console.log('‚è±Ô∏è Temps total de chargement:', loadTime, 'secondes');
          console.log('üîç Inspection de l\'objet texture re√ßu:');
          console.log('   Type:', typeof loadedTexture);
          console.log('   Constructor:', loadedTexture.constructor.name);
          console.log('   UUID:', loadedTexture.uuid);
          
          // V√©rification critique de la propri√©t√© image
          if (loadedTexture.image) {
            console.log('‚úÖ Propri√©t√© image pr√©sente:');
            console.log('   Dimensions:', loadedTexture.image.width, 'x', loadedTexture.image.height);
            console.log('   Type image:', typeof loadedTexture.image);
            console.log('   Complete:', loadedTexture.image.complete);
            
            // Configuration optimale de la texture pour VR
            loadedTexture.minFilter = THREE.LinearFilter;
            loadedTexture.magFilter = THREE.LinearFilter;
            loadedTexture.wrapS = THREE.RepeatWrapping;
            loadedTexture.wrapT = THREE.ClampToEdgeWrapping;
            loadedTexture.needsUpdate = true;
            
            console.log('‚úÖ Configuration de texture r√©ussie');
            
            setLoadingState('success');
            setDetailedStatus('Texture configur√©e et pr√™te');
            textureRef.current = loadedTexture;
            
            // Notifier le parent que la texture est pr√™te
            if (onTextureLoaded) {
              console.log('üì§ Transmission de la texture au composant parent...');
              onTextureLoaded(loadedTexture);
            }
            
          } else {
            console.error('‚ùå PROBL√àME CRITIQUE: texture.image est undefined m√™me en direct!');
            setLoadingState('error');
            setDetailedStatus('Texture invalide - pas d\'image');
            if (onTextureError) {
              onTextureError(new Error('Texture charg√©e mais sans donn√©es d\'image valides'));
            }
          }
        },
        
        // Callback de progression
        (progress) => {
          if (progress.lengthComputable) {
            const percentComplete = (progress.loaded / progress.total) * 100;
            const progressText = `${percentComplete.toFixed(1)}% (${(progress.loaded / 1024 / 1024).toFixed(1)}MB / ${(progress.total / 1024 / 1024).toFixed(1)}MB)`;
            console.log(`üìä Progression chargement direct: ${progressText}`);
            setProgressInfo({
              percent: percentComplete,
              loaded: progress.loaded,
              total: progress.total
            });
            setDetailedStatus(`T√©l√©chargement en cours: ${progressText}`);
            setLoadingState('downloading');
          } else {
            console.log('üìä Progression chargement direct: donn√©es en cours...');
            setDetailedStatus('T√©l√©chargement en cours (taille inconnue)');
            setLoadingState('downloading');
          }
        },
        
        // Callback d'erreur
        (error) => {
          const loadTime = startTimeRef.current ? (Date.now() - startTimeRef.current) / 1000 : 'inconnu';
          
          console.error('üí• === √âCHEC CHARGEMENT DIRECT THREE.JS ===');
          console.error('‚è±Ô∏è Temps avant √©chec:', loadTime, 'secondes');
          console.error('üî¥ Type d\'erreur:', error.constructor.name);
          console.error('üìù Message d\'erreur:', error.message);
          
          setLoadingState('error');
          setDetailedStatus(`Erreur: ${error.message}`);
          
          if (onTextureError) {
            onTextureError(error);
          }
        }
      );
    }
  }, [shouldLoad, url, onTextureLoaded, onTextureError, webglAttemptStarted]);

  // Nettoyage lors du d√©montage
  useEffect(() => {
    return () => {
      if (textureRef.current) {
        console.log('üßπ Nettoyage de la texture Three.js direct...');
        textureRef.current.dispose();
      }
    };
  }, []);

  return {
    loadingState,
    isLoading: shouldLoad && loadingState !== 'success' && loadingState !== 'error',
    detailedStatus,
    progressInfo,
    webglAttemptStarted
  };
}

// Composant enrichi pour afficher le statut d√©taill√© du chargement de texture
function TextureLoadingStatus({ isLoading, loadingState, hasTexture, detailedStatus, progressInfo, webglAttemptStarted }) {
  if (!webglAttemptStarted && !hasTexture) return null;
  
  const getMessage = () => {
    if (isLoading) {
      if (progressInfo) {
        return `‚è≥ ${detailedStatus}
üìä ${progressInfo.percent.toFixed(1)}% t√©l√©charg√©
üì¶ ${(progressInfo.loaded / 1024 / 1024).toFixed(1)}MB / ${(progressInfo.total / 1024 / 1024).toFixed(1)}MB`;
      }
      return `‚è≥ ${detailedStatus}`;
    }
    
    if (hasTexture) {
      return `‚úÖ Texture panoramique active!
üé® Image appliqu√©e au material Three.js
üîß Configuration VR optimis√©e`;
    }
    
    if (loadingState === 'error') {
      return `‚ùå √âchec chargement WebGL
üìù ${detailedStatus}
üîç Consultez la console pour l'analyse compl√®te`;
    }
    
    return `‚ö™ √âtat: ${detailedStatus}`;
  };
  
  const getColor = () => {
    if (isLoading) return '#FFA500';
    if (hasTexture) return '#00FF00';
    if (loadingState === 'error') return '#FF0000';
    return '#FFFFFF';
  };
  
  return (
    <Text
      position={[0, 2, -2]}
      fontSize={0.18}
      color={getColor()}
      anchorX="center"
      anchorY="middle"
      outlineWidth={0.02}
      outlineColor="black"
      whiteSpace="pre-line"
    >
      {getMessage()}
    </Text>
  );
}

// Composant VR Environment restructur√© pour une architecture correcte
function VREnvironment() {
  const [clicked, setClicked] = useState(false);
  const [preflightResults, setPreflightResults] = useState(null);
  const [textureLoadingAllowed, setTextureLoadingAllowed] = useState(false);
  const [finalTexture, setFinalTexture] = useState(null);
  const [loadingError, setLoadingError] = useState(null);

  // Callback enrichi pour recevoir les r√©sultats des tests pr√©alables avec optimisation
  const handlePreflightResults = useCallback((results) => {
    setPreflightResults(results);
    
    // Autoriser le chargement de texture seulement si tous les tests pr√©alables ont r√©ussi
    if (results.fileExists && results.accessibleViaFetch && results.accessibleViaImage) {
      console.log('üéâ Tests pr√©alables r√©ussis avec optimisation automatique');
      
      if (results.needsOptimization) {
        console.log('üéØ Image automatiquement redimensionn√©e pour WebGL');
        console.log('üìê Dimensions finales:', results.imageDimensions.width, 'x', results.imageDimensions.height);
        console.log('üîó URL optimis√©e g√©n√©r√©e:', results.finalUrl);
      } else {
        console.log('‚úÖ Image d√©j√† aux dimensions optimales');
      }
      
      setTextureLoadingAllowed(true);
    } else {
      console.log('‚ùå Tests pr√©alables √©chou√©s, chargement texture bloqu√©');
      setTextureLoadingAllowed(false);
      setFinalTexture(null);
    }
  }, []);

  // Gestionnaires pour le chargement de texture avec diagnostic enrichi
  const handleTextureLoaded = useCallback((texture) => {
    console.log('üéâ Texture finale pr√™te pour affichage VR');
    console.log('üìä Propri√©t√©s de la texture re√ßue:', {
      width: texture.image?.width,
      height: texture.image?.height,
      format: texture.format,
      type: texture.type
    });
    setFinalTexture(texture);
    setLoadingError(null);
  }, []);

  const handleTextureError = useCallback((error) => {
    console.error('‚ùå Erreur finale de chargement texture:', error);
    setLoadingError(error);
    setFinalTexture(null);
  }, []);

  // ‚úÖ CORRECT: Utilisation du hook enrichi avec l'URL optimis√©e
  // Dans VREnvironment, remplacez l'appel useTextureLoading par :
const { loadingState, isLoading, detailedStatus, progressInfo, webglAttemptStarted } = useDirectTextureLoading({
  url: preflightResults?.finalUrl || '/panorama-test.jpg',
  shouldLoad: textureLoadingAllowed,
  onTextureLoaded: handleTextureLoaded,
  onTextureError: handleTextureError
});

  // Nettoyage des ressources lors du d√©montage du composant
  useEffect(() => {
    return () => {
      // Nettoyer les URL temporaires cr√©√©es par le redimensionnement
      if (preflightResults?.finalUrl && preflightResults.finalUrl !== preflightResults.originalUrl) {
        console.log('üßπ Nettoyage des ressources temporaires...');
        imageResizer.cleanup(preflightResults.finalUrl);
      }
    };
  }, [preflightResults]);

  // Gestionnaires d'√©v√©nements m√©moris√©s pour l'interaction
  const handleCubeClick = useCallback(() => {
    setClicked(prev => !prev);
    console.log('üéØ Interaction cube d√©tect√©e - VR fonctionne!');
  }, []);

  const handleCubePointerOver = useCallback(() => {
    document.body.style.cursor = 'pointer';
    console.log('üëÜ Survol cube d√©tect√©');
  }, []);

  const handleCubePointerOut = useCallback(() => {
    document.body.style.cursor = 'auto';
  }, []);

  return (
    <>
      {/* Diagnostic WebGL - Informations sur les capacit√©s du GPU */}
      <WebGLDiagnostic />
      
      {/* Moniteur m√©moire - Surveillance des ressources syst√®me */}
      <MemoryMonitor />
      
      {/* Tests pr√©alables - V√©rification du fichier avant chargement texture */}
      <PreflightDiagnostic 
        url="/panorama-test.jpg" 
        onResults={handlePreflightResults}
      />
      
      {/* Indicateur de statut enrichi du chargement de texture WebGL */}
      <TextureLoadingStatus 
        isLoading={isLoading}
        loadingState={loadingState}
        hasTexture={!!finalTexture}
        detailedStatus={detailedStatus}
        progressInfo={progressInfo}
        webglAttemptStarted={webglAttemptStarted}
      />

      {/* ‚úÖ CORRECT: La texture est utilis√©e ICI dans un contexte Three.js appropri√© */}
      {/* Sph√®re panoramique - Seulement si la texture finale est disponible */}
      {finalTexture && (
        <mesh scale={[-1, 1, 1]}>
          <sphereGeometry args={[500, 60, 40]} />
          <meshBasicMaterial 
            map={finalTexture}
            side={THREE.BackSide}
          />
        </mesh>
      )}
      
      {/* Sph√®re de fallback avec environnement de base quand pas de texture */}
      {!finalTexture && (
        <mesh scale={[-1, 1, 1]}>
          <sphereGeometry args={[500, 32, 16]} />
          <meshBasicMaterial 
            color="#1a1a2e"
            side={THREE.BackSide}
          />
        </mesh>
      )}
      
      {/* √âclairage adaptatif selon la pr√©sence de la texture panoramique */}
      <ambientLight intensity={finalTexture ? 0.6 : 0.8} />
      
      {/* Cube de test interactif - Validation que les interactions VR fonctionnent */}
      <Box
        position={[0, 1.5, -2]}
        scale={clicked ? 1.5 : 1}
        onClick={handleCubeClick}
        onPointerOver={handleCubePointerOver}
        onPointerOut={handleCubePointerOut}
      >
        <meshStandardMaterial 
          color={clicked ? '#F97316' : '#3B82F6'} 
          transparent={true} 
          opacity={0.8} 
        />
      </Box>
      
  {/* Instructions mises √† jour pour refl√©ter les nouvelles capacit√©s */}
  <Text
    position={[-3, 1, -2]}
    fontSize={0.15}
    color="#F97316"
    anchorX="left"
    anchorY="middle"
    outlineWidth={0.01}
    outlineColor="white"
  >
    ü§ñ Optimisation automatique int√©gr√©e
    üìã 1. Tests pr√©alables automatiques
    üéØ 2. Redimensionnement intelligent si n√©cessaire
    ‚ö° 3. Chargement WebGL optimis√©
    üéÆ 4. Affichage VR haute performance
    üßπ 5. Gestion m√©moire automatique
  </Text>
      
      {/* Affichage des erreurs de chargement avec diagnostic */}
      {loadingError && (
        <Text
          position={[0, 0.5, -2]}
          fontSize={0.18}
          color="#FF6B6B"
          anchorX="center"
          anchorY="middle"
          outlineWidth={0.01}
          outlineColor="black"
          whiteSpace="pre-line"
        >
          {`‚ùå Erreur de chargement final:
${loadingError.message}
üîç D√©tails disponibles dans la console
üí° V√©rifiez les r√©sultats des tests pr√©alables`}
        </Text>
      )}
      
      {/* Support VR complet - Contr√¥leurs et tracking des mains */}
      <SimpleTextureTest />
      <Controllers />
      <Hands />
    </>
  );
}
// Composant de test ultra-simple pour isoler le probl√®me Three.js
function SimpleTextureTest() {
  const [testResult, setTestResult] = useState('Initialisation...');
  const [testDetails, setTestDetails] = useState('');

  useEffect(() => {
    const runSimpleTest = async () => {
      console.log('üß™ === TEST DE DIAGNOSTIC ULTRA-SIMPLE ===');
      setTestResult('Test en cours...');
      
      try {
        // Test 1: Cr√©er un loader Three.js basique
        console.log('üìã Test 1: Cr√©ation du TextureLoader...');
        const loader = new THREE.TextureLoader();
        
        // Test 2: Essayer de charger notre image avec des callbacks d√©taill√©s
        console.log('üìã Test 2: Chargement direct via Three.js...');
        
        loader.load(
          '/panorama-test.jpg',
          
          // Callback de succ√®s
          (texture) => {
            console.log('‚úÖ Succ√®s du chargement Three.js direct!');
            console.log('üìä Propri√©t√©s de la texture:');
            console.log('   texture.image existe:', !!texture.image);
            console.log('   texture.image.width:', texture.image?.width);
            console.log('   texture.image.height:', texture.image?.height);
            console.log('   texture.image.complete:', texture.image?.complete);
            console.log('   texture.format:', texture.format);
            console.log('   texture.type:', texture.type);
            
            if (texture.image && texture.image.width && texture.image.height) {
              setTestResult('‚úÖ SUCCESS! Three.js peut charger la texture');
              setTestDetails(`Dimensions: ${texture.image.width}x${texture.image.height}`);
              console.log('üéâ CONCLUSION: Le probl√®me ne vient PAS de Three.js de base');
              console.log('üîç Le probl√®me est probablement dans React Three Fiber ou useLoader');
            } else {
              setTestResult('‚ùå √âCHEC: texture.image manquante m√™me en Three.js direct');
              setTestDetails('Probl√®me au niveau de Three.js lui-m√™me');
              console.log('üö® CONCLUSION: Probl√®me fondamental avec Three.js dans cet environnement');
            }
          },
          
          // Callback de progression
          (progress) => {
            const percentComplete = progress.lengthComputable ? 
              (progress.loaded / progress.total) * 100 : 0;
            console.log(`üìä Progression: ${percentComplete.toFixed(1)}%`);
            setTestDetails(`Chargement: ${percentComplete.toFixed(1)}%`);
          },
          
          // Callback d'erreur
          (error) => {
            console.error('‚ùå Erreur lors du test Three.js direct:', error);
            setTestResult('‚ùå √âCHEC: Erreur dans Three.js direct');
            setTestDetails(`Erreur: ${error.message}`);
            console.log('üö® CONCLUSION: Probl√®me fondamental avec Three.js ou l\'environnement');
          }
        );
        
      } catch (error) {
        console.error('‚ùå Erreur critique lors du test:', error);
        setTestResult('‚ùå √âCHEC CRITIQUE');
        setTestDetails(`Exception: ${error.message}`);
      }
    };

    runSimpleTest();
  }, []);

  return (
    <>
      <Text
        position={[0, 2, -2]}
        fontSize={0.3}
        color={testResult.includes('SUCCESS') ? '#00FF00' : 
              testResult.includes('√âCHEC') ? '#FF0000' : '#FFA500'}
        anchorX="center"
        anchorY="middle"
        outlineWidth={0.02}
        outlineColor="black"
        whiteSpace="pre-line"
      >
        {`üß™ Test de diagnostic Three.js
${testResult}
${testDetails}`}
      </Text>
      
      {/* Cube de r√©f√©rence pour confirmer que Three.js fonctionne basiquement */}
      <Box
        position={[0, 0, -2]}
        scale={1}
      >
        <meshStandardMaterial color="#3B82F6" />
      </Box>
      
      <ambientLight intensity={0.8} />
    </>
  );
}
// Composant principal
function App() {
  const [diagnosticVisible, setDiagnosticVisible] = useState(true);

  const toggleDiagnostic = useCallback(() => {
    setDiagnosticVisible(prev => !prev);
  }, []);

  return (
    <div className="App">
      <div className="controls">
        <h1>üî¨ DreamScape VR - Architecture Hooks Corrig√©e</h1>
        <p>Version restructur√©e respectant les r√®gles des hooks React</p>
        
        <button 
          onClick={toggleDiagnostic}
          style={{
            background: diagnosticVisible ? '#22C55E' : '#6B7280',
            color: 'white',
            border: 'none',
            padding: '8px 16px',
            borderRadius: '6px',
            margin: '10px',
            cursor: 'pointer'
          }}
        >
          {diagnosticVisible ? 'üîç Diagnostic ON' : 'üîç Diagnostic OFF'}
        </button>
        
        <p style={{ fontSize: '14px', color: '#666', marginBottom: '10px' }}>
          ‚ö†Ô∏è Placez votre image panoramique 360¬∞ nomm√©e 'panorama-test.jpg' dans le dossier /public
        </p>
        
        <p style={{ fontSize: '12px', color: '#888' }}>
          üìä Cette version respecte les r√®gles des hooks et effectue des tests pr√©alables
        </p>
        
        <VRButton 
          style={{
            background: 'linear-gradient(45deg, #F97316, #DB2777)',
            color: 'white',
            border: 'none',
            padding: '12px 24px',
            borderRadius: '8px',
            fontSize: '16px',
            cursor: 'pointer',
            margin: '10px',
            boxShadow: '0 4px 15px rgba(249, 115, 22, 0.3)'
          }}
        />
        
        <ARButton 
          style={{
            background: 'linear-gradient(45deg, #3B82F6, #22C55E)',
            color: 'white',
            border: 'none',
            padding: '12px 24px',
            borderRadius: '8px',
            fontSize: '16px',
            cursor: 'pointer',
            margin: '10px',
            boxShadow: '0 4px 15px rgba(59, 130, 246, 0.3)'
          }}
        />
      </div>

      <Canvas
        style={{ 
          height: '80vh', 
          width: '100%',
          background: 'linear-gradient(to bottom, #1a1a2e, #16213e)'
        }}
        camera={{ position: [0, 1.6, 0], fov: 75 }}
        onError={(error) => {
          console.error('‚ùå ERREUR CANVAS:', error);
        }}
      >
        <XR>
          <Suspense 
            fallback={
              <Text
                position={[0, 2, -2]}
                fontSize={0.4}
                color="yellow"
                anchorX="center"
                anchorY="middle"
              >
                Chargement Suspense...
              </Text>
            }
          >
            <VREnvironment />
          </Suspense>
          
          <OrbitControls 
            enableZoom={true} 
            enablePan={false}
            enableRotate={true}
            maxDistance={10}
            minDistance={0.1}
          />
        </XR>
      </Canvas>
      
      <div className="instructions">
        <h3>üî¨ Architecture Corrig√©e - Diagnostic par Phases :</h3>
        <div style={{ textAlign: 'left', margin: '20px' }}>
          <h4>Corrections architecturales majeures :</h4>
          <p><strong>S√©paration des responsabilit√©s :</strong> Chaque aspect du diagnostic est maintenant g√©r√© par un composant d√©di√©, √©vitant les violations des r√®gles des hooks.</p>
          
          <p><strong>Hooks appel√©s de mani√®re coh√©rente :</strong> useLoader est toujours appel√© mais avec une URL conditionnelle, respectant ainsi les r√®gles fondamentales de React.</p>
          
          <p><strong>Tests pr√©alables ind√©pendants :</strong> Le diagnostic du fichier, de la connectivit√© et du d√©codage d'image se fait avant tout appel √† useLoader.</p>
          
          <p><strong>Chargement conditionnel s√©curis√© :</strong> useLoader ne tente de charger la vraie texture que si tous les tests pr√©alables ont confirm√© que c'est possible.</p>
          
          <h4>Ce que vous devriez maintenant observer :</h4>
          <p>Phase 1 : Tests pr√©alables s'ex√©cutant automatiquement au chargement</p>
          <p>Phase 2 : Autorisation ou blocage du chargement de texture selon les r√©sultats</p>
          <p>Phase 3 : Affichage r√©ussi de la texture ou message d'erreur sp√©cifique</p>
        </div>
      </div>
    </div>
  );
}

export default App;